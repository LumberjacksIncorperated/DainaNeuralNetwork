
[] (DaveReaction, DavesBrain, NeuralValueMelody, Natural, Integer, NeuralValue, SystemIO, OutputStream, String)
{
	^ *{

		[DavesBrain] davesBrain = \[DavesBrain]:newNeuralLayerWithNumberOfInputsNumberOfInternalLayersSizeOfInternalLayers numberOfInputsToDavesBrain numberOfNeuralLayersInDavesBrain sizeOfNeuralLayersInDavesBrain;
		[DaveReaction] reactionDaveHadToSaidMelody = \davesBrain:classifyInputMelodyThroughDavesBrain testMelody;

		\davesBrain:learnDaveSomeKnowledgeWithInputMelodyAndHowDaveShouldReact testMelody (\[DaveReaction]:daveFrownReaction);
		[DaveReaction] reactionDaveHadToSaidMelodyAfterLearning = \davesBrain:classifyInputMelodyThroughDavesBrain testMelody;
		\davesBrain:learnDaveSomeKnowledgeWithInputMelodyAndHowDaveShouldReact testMelody (\[DaveReaction]:daveFrownReaction);
		[DaveReaction] reactionDaveHadToSaidMelodyAfterLearning2 = \davesBrain:classifyInputMelodyThroughDavesBrain testMelody;


		[OutputStream] stdout = \[SystemIO]:stdout;

		\stdout:writeString (\[String]:newString "Daves brain test.....\n");
		\stdout:writeString (\reactionDaveHadToSaidMelody:stringRepresentationOfReaction);
		\stdout:writeString (\[String]:newString "\n");
		\stdout:writeString (\[String]:newString "Daves brain test after learning.....\n");
		\stdout:writeString (\reactionDaveHadToSaidMelodyAfterLearning:stringRepresentationOfReaction);
		\stdout:writeString (\[String]:newString "\n");
		\stdout:writeString (\[String]:newString "Daves brain test after learning2.....\n");
		\stdout:writeString (\reactionDaveHadToSaidMelodyAfterLearning2:stringRepresentationOfReaction);
		\stdout:writeString (\[String]:newString "\n");


				@++ classifyInputMelodyThroughDavesBrain *([NeuralValueMelody] inputMelody) -> [DaveReaction] {

	@} -> \[DaveReaction]:daveSmileReaction 

	}	!{
			[Natural] numberOfInputsToDavesBrain = \[Natural]:newNatural 3;
			[Natural] numberOfNeuralLayersInDavesBrain = \[Natural]:newNatural 4; 
			[Natural] sizeOfNeuralLayersInDavesBrain = \[Natural]:newNatural 7;

			[NeuralValueMelody] testMelody = \[NeuralValueMelody]:newEmptyMelody;
			(\composeTestMelody *([[Integer]->] insertIntegerAsNeuralValueIntoMelody) {
				\insertIntegerAsNeuralValueIntoMelody (\[Integer]:newPositive 10000);
				\insertIntegerAsNeuralValueIntoMelody (\[Integer]:newNegative 10000);
				\insertIntegerAsNeuralValueIntoMelody (\[Integer]:newPositive 10000);
			})	!{
					[[[[Integer]->]->]->] composeTestMelody = *([[[Integer]->]->] composerOfMelodyRequiringMethodToInsertIntegerAsNeuralValueIntoMelody) {
						\composerOfMelodyRequiringMethodToInsertIntegerAsNeuralValueIntoMelody methodToInsertIntegerAsNeuralValueIntoMelody
							!{
								[[Integer]->] methodToInsertIntegerAsNeuralValueIntoMelody = *([Integer]i){\testMelody:addNeuralValueToMelody (\[NeuralValue]:newNeuralValueWithIntegerRepresentation i)};
							}
					}
				}			
			
		} 
}
