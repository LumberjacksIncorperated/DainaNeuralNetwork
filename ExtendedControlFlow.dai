
[ExtendedControlFlow<A [Object]>] (Object, Wrapper) 
{
	@@
		This method takes a method that retrieves and object and passes it to a method, and a default,
		and returns either the object found or the default

		It basically worries about the wrapping for you
	@@
	:: retriveUsingDefaultOnFailure *([[[&A]->]->] retrieveObjectAndPassToMethod, [&A] defaultObject) -> [&A] {
		[Wrapper<[&A]>] wrappedObjectToReturn = \[Wrapper<[&A]>]:wrapperWithObject defaultObject;
		\retrieveObjectAndPassToMethod methodThatRecievesRetrievedObjectAndStoresItInWrapper
			!{
				[[&A]->] methodThatRecievesRetrievedObjectAndStoresItInWrapper = *([&A] retrivedObject) {
					\wrappedObjectToReturn:store retrivedObject;
				}
			};
	}  
	-> \wrappedObjectToReturn:unwrap
}

@@
	For lambdas that we pass in:
		Can pass in objects from an outer scope implicitly
@@


