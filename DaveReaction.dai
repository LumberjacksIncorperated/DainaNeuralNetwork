@@
	Why does DaveReaction "extend" Natural?

	We can now have useful comparison functions, where a reaction:
		- Can be compared to another reaction
		- We can also have an order to our reactions
		- We could also possibly later add reactions
		- We can build on this enumerations infinitely 

	Basically we are extending something that already has infinite possible states that we can directly compare

	Instead of having an internal value for the enumeration, we BECOME the internal value, to abstract away from it
@@
@@
	We are extending something not from the same intuitive concept, but from some functionality we want to steal,
	and because we can only steal one we have to pick this wisely
@@
[DaveReaction : [Natural]] (Natural, NeuralValueMelody, NeuralValue, Boolean, ExtendedControlFlow, String)
{
	@@
		We have two options, construct with a static value, or construct the object in question directly with two different
		constructors.

		Constructing with a static value would simply be more ineffecient because you have to call a function first
	@@
	~ daveSmileReaction *{\::newNatural 1}
	~ daveFrownReaction *{\::newNatural 2}

    @@
		Simple static function
    @@
	:: davesMinimumPitchThreasholdMelodyForHappyness *-> [NeuralValueMelody] {
		[NeuralValueMelody] davesThresholdMelody = \[NeuralValueMelody]:newEmptyMelody;
		davesThresholdMelody:addNeuralValueToMelody davesThresholdNeuralValue;
	}  !{
			[NeuralValue] davesThresholdNeuralValue = (\[NeuralValue]:baseNeuralValue);
		}
	-> davesThresholdMelody

	@@
		By using default on failure, we only have to worry about two less things:

			1/ We do not need to worry about the wrapping
			2/ In this case it is binary, but could be extended if multiple reactions
	@@
	:: getDavesReationToAMelody *([NeuralValueMelody] melodyForDaveToReactTo) -> [DaveReaction] {
		[DaveReaction] davesReationToMelody = \[ExtendedControlFlow<[DaveReaction]>]:retriveUsingDefaultOnFailure retrieveDavesReactionAsSmileIfThePitchMeetsDavesStandardForHappinessAndPassToMethod frownByDefault;
	}  !{
			[[[DaveReaction]->]->] retrieveDavesReactionAsSmileIfThePitchMeetsDavesStandardForHappinessAndPassToMethod = *([[DaveReaction]->] methodToPassReactionTo) {
				[Boolean] pitchOfMelodyMeetsDavesMinimumStandardsForHappyness = \melodyForDaveToReactTo:isMelodyHigherThenSomeOtherMelody \[DaveReaction]:davesMinimumPitchThreasholdMelodyForHappyness;
				\pitchOfMelodyMeetsDavesMinimumStandardsForHappyness:ifTrue *{\methodToPassReactionTo \[DaveReaction]:daveSmileReaction}
			};
			[DaveReaction] frownByDefault = \[DaveReaction]:daveFrownReaction;
		}
	-> davesReationToMelody

	 ++ stringRepresentationOfReaction *-> [String] {
	 	[String] stringRepresentationOfReaction = (\[ExtendedControlFlow<[String]>]:retriveUsingDefaultOnFailure getSmileStringIfDavesReactionWasASmileAndPassToMethod useFrownStringByDefault)
	 	   !{
	 			[[[String]->]->] getSmileStringIfDavesReactionWasASmileAndPassToMethod = *([[String]->] methodToProvideStringTo) {
	 				[Boolean] davesReactionIsASmile = \:isEqualTo (\[DaveReaction]:daveSmileReaction);
	 				\davesReactionIsASmile:ifTrue *{\methodToProvideStringTo daveReactionSmileString}
				};
				[String] useFrownStringByDefault = daveReactionFrownString;
	 		}
	 } !{
	 		@@
	 			If these two are in different parts but they should be logically placed together:
	 				1. For understanding
	 				2. For changing them

	 				1. If it used throughout the whole thing
	 				2. If it is part of a set that is used throughout the whole thing
	 		@@
	 		[String] daveReactionSmileString = \[String]:newString "Dave smiled :)";
	 		[String] daveReactionFrownString = \[String]:newString "Dave Frowned :(";
	 	}
	-> stringRepresentationOfReaction

}


